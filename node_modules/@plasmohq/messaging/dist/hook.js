import{useEffect as g,useRef as l,useState as M}from"react";import{nanoid as E}from"nanoid";var P=globalThis.browser?.tabs||globalThis.chrome?.tabs,r=()=>{let e=globalThis.browser?.runtime||globalThis.chrome?.runtime;if(!e)throw new Error("Extension runtime is not available");return e};var y=(e,s)=>!s.__internal&&e.source===globalThis.window&&e.data.name===s.name&&(s.relayId===void 0||e.data.relayId===s.relayId);var d=(e,s,t=globalThis.window)=>{let o=async n=>{if(y(n,e)&&!n.data.relayed){let a={name:e.name,relayId:e.relayId,body:n.data.body},i=await s?.(a);t.postMessage({name:e.name,relayId:e.relayId,instanceId:n.data.instanceId,body:i,relayed:!0},{targetOrigin:e.targetOrigin||"/"})}};return t.addEventListener("message",o),()=>t.removeEventListener("message",o)};var R=async e=>r().sendMessage(e.extensionId??null,e);var p=e=>d(e,R);var u=e=>{let s=async(o,n,a)=>{await e?.({...o,sender:n},{send:i=>a(i)})},t=(o,n,a)=>(s(o,n,a),!0);return r().onMessage.addListener(t),()=>{r().onMessage.removeListener(t)}};var m=new Map,b=e=>{let s=m.get(e);if(s)return s;let t=r().connect({name:e});return m.set(e,t),t},f=e=>{m.delete(e)},c=(e,s,t)=>{let o=b(e);function n(){f(e),t?.()}return o.onMessage.addListener(s),o.onDisconnect.addListener(n),{port:o,disconnect:()=>{o.onMessage.removeListener(s),o.onDisconnect.removeListener(n)}}};var z=e=>{let[s,t]=M();return g(()=>u(async(o,n)=>{t(o.body),await e(o,n)}),[e]),{data:s}},G=e=>{let s=l(),t=l(0),[o,n]=M();return g(()=>{if(!e)return null;let{port:a,disconnect:i}=c(e,x=>{n(x)},()=>{t.current=t.current+1});return s.current=a,i},[e,t.current]),{data:o,send:a=>{s.current.postMessage({name:e,body:a})},listen:a=>c(e,a)}};function J(e){g(()=>p(e),[])}var K=(e,s)=>{let t=l();return g(()=>(t.current=d(e,s),t.current),[]),()=>t.current?.()};export{z as useMessage,J as useMessageRelay,G as usePort,K as useRelay};
